<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskAGuideContent" xml:space="preserve">
    <value>If I return an answer which is not what you're looking for (in other words, BAD) you can always ask an expert to help.</value>
  </data>
  <data name="AskAGuideHeader" xml:space="preserve">
    <value>Ask an expert</value>
  </data>
  <data name="EndUserCardContent" xml:space="preserve">
    <value>Maybe me sending out updates does help, but what can close a ticket the fastest? You being able to message the end user yourself - this way we all can do our part to help the users!</value>
  </data>
  <data name="EndUserCardHeader" xml:space="preserve">
    <value>Chat with Users</value>
  </data>
  <data name="FunctionCardContent" xml:space="preserve">
    <value>You can ask a question about this game, _Ganga River Rescue_ and I'll do my best to answer it!</value>
  </data>
  <data name="FunctionCardHeader" xml:space="preserve">
    <value>Ask a question</value>
  </data>
  <data name="NotificationCardContent" xml:space="preserve">
    <value>It is my job to alert you whenever there are users requesting for expert help!</value>
  </data>
  <data name="NotificationCardHeader" xml:space="preserve">
    <value>Be Notified</value>
  </data>
  <data name="ShareFeedbackContent" xml:space="preserve">
    <value>I encourage you to share more feedback about how I'm doing (be kind please), so that I can help you better in the future.</value>
  </data>
  <data name="ShareFeedbackHeader" xml:space="preserve">
    <value>Share Feedback</value>
  </data>
  <data name="TakeATeamTourButtonText" xml:space="preserve">
    <value>Team tour</value>
  </data>
  <data name="TakeATourButtonText" xml:space="preserve">
    <value>Take a tour!</value>
    <comment>Click the take a tour button.</comment>
  </data>
  <data name="TicketSystemCardContent" xml:space="preserve">
    <value>As tickets come in, you have the ability to assign tickets to yourself. While you work on a ticket, I will alert the end user who requests your help of the latest updates</value>
  </data>
  <data name="TicketSystemCardHeader" xml:space="preserve">
    <value>Ticket System</value>
  </data>
  <data name="UnrecognizedTeamInputMessage" xml:space="preserve">
    <value>Ooook... My 🤖 🧠 cannot understand what you are asking me to do, and I don't think I can do a lot of user specific functions in a team. If you want to ask me a question, talk to me 1:1. Otherwise, click on the tour button at the bottom of this card</value>
  </data>
  <data name="UserWelcomeCardContent" xml:space="preserve">
    <value>Hi! I’m the Ganga River Rescue Bot! If you want to know more about what I do, click on _Take a tour_ below.</value>
    <comment>Introduction of the bot.</comment>
  </data>
  <data name="UserWelcomeCardHeader" xml:space="preserve">
    <value>_Namaste_ 👋👋👋</value>
    <comment>Our header</comment>
  </data>
  <data name="WelcomeTeamCardContent" xml:space="preserve">
    <value>Namaste team! I'm going to help you with understanding the tickets, assigning them, and connecting you to the knowledge seekers (the end users...). To find out more, click on _Take a tour_ below.</value>
  </data>
</root>